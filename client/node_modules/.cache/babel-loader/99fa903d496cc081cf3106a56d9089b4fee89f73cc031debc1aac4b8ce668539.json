{"ast":null,"code":"var _jsxFileName = \"/home/slow/ticket-sys/client/src/pages/ticketpage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useLocation, useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TicketGrid = () => {\n  _s();\n  const {\n    uniqueId\n  } = useParams();\n  const location = useLocation(); // Get the location to access query params\n  const [tickets, setTickets] = useState([]);\n  const [selectedTickets, setSelectedTickets] = useState([]);\n  const ticketCount = new URLSearchParams(location.search).get('ticketCount'); // Extract ticketCount from query param\n\n  useEffect(() => {\n    // Fetch available tickets (no need for uniqueId anymore)\n    axios.get('http://localhost:5000/api/tickets') // Fetch all available tickets\n    .then(response => {\n      setTickets(response.data);\n    }).catch(error => {\n      console.error('Error fetching tickets:', error);\n    });\n  }, []);\n  const handleTicketSelect = ticketId => {\n    // Check if the user is already selecting the max number of tickets\n    if (selectedTickets.length >= ticketCount) {\n      alert(`You can only select up to ${ticketCount} tickets.`);\n      return;\n    }\n    if (selectedTickets.includes(ticketId)) {\n      setSelectedTickets(selectedTickets.filter(id => id !== ticketId));\n    } else {\n      setSelectedTickets([...selectedTickets, ticketId]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Available Tickets\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"You can select up to \", ticketCount, \" tickets\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: tickets.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No available tickets found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this) : tickets.map(ticket => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            disabled: selectedTickets.length >= ticketCount && !selectedTickets.includes(ticket.ticketId) // Disable if limit reached\n            ,\n            onChange: () => handleTicketSelect(ticket.ticketId)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 17\n          }, this), \"Ticket Number: \", ticket.ticketNumber, \" (Available)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 15\n        }, this)\n      }, ticket.ticketId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Selected Tickets:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), selectedTickets.map(ticketId => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Ticket ID: \", ticketId]\n      }, ticketId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(TicketGrid, \"xRJIybQTOgxSCzMKhlugc1BHKMw=\", false, function () {\n  return [useParams, useLocation];\n});\n_c = TicketGrid;\nexport default TicketGrid;\nvar _c;\n$RefreshReg$(_c, \"TicketGrid\");","map":{"version":3,"names":["React","useEffect","useState","useLocation","useParams","axios","jsxDEV","_jsxDEV","TicketGrid","_s","uniqueId","location","tickets","setTickets","selectedTickets","setSelectedTickets","ticketCount","URLSearchParams","search","get","then","response","data","catch","error","console","handleTicketSelect","ticketId","length","alert","includes","filter","id","children","fileName","_jsxFileName","lineNumber","columnNumber","map","ticket","type","disabled","onChange","ticketNumber","_c","$RefreshReg$"],"sources":["/home/slow/ticket-sys/client/src/pages/ticketpage.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useLocation, useParams } from 'react-router-dom';\nimport axios from 'axios';\n\nconst TicketGrid = () => {\n  const { uniqueId } = useParams();\n  const location = useLocation(); // Get the location to access query params\n  const [tickets, setTickets] = useState([]);\n  const [selectedTickets, setSelectedTickets] = useState([]);\n  const ticketCount = new URLSearchParams(location.search).get('ticketCount'); // Extract ticketCount from query param\n\n  useEffect(() => {\n    // Fetch available tickets (no need for uniqueId anymore)\n    axios\n      .get('http://localhost:5000/api/tickets')  // Fetch all available tickets\n      .then((response) => {\n        setTickets(response.data);\n      })\n      .catch((error) => {\n        console.error('Error fetching tickets:', error);\n      });\n  }, []);\n\n  const handleTicketSelect = (ticketId) => {\n    // Check if the user is already selecting the max number of tickets\n    if (selectedTickets.length >= ticketCount) {\n      alert(`You can only select up to ${ticketCount} tickets.`);\n      return;\n    }\n\n    if (selectedTickets.includes(ticketId)) {\n      setSelectedTickets(selectedTickets.filter((id) => id !== ticketId));\n    } else {\n      setSelectedTickets([...selectedTickets, ticketId]);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Available Tickets</h1>\n      <p>You can select up to {ticketCount} tickets</p>\n      <div>\n        {tickets.length === 0 ? (\n          <p>No available tickets found.</p>\n        ) : (\n          tickets.map((ticket) => (\n            <div key={ticket.ticketId}>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  disabled={selectedTickets.length >= ticketCount && !selectedTickets.includes(ticket.ticketId)} // Disable if limit reached\n                  onChange={() => handleTicketSelect(ticket.ticketId)}\n                />\n                Ticket Number: {ticket.ticketNumber} (Available)\n              </label>\n            </div>\n          ))\n        )}\n      </div>\n      <div>\n        <h3>Selected Tickets:</h3>\n        {selectedTickets.map((ticketId) => (\n          <div key={ticketId}>Ticket ID: {ticketId}</div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default TicketGrid;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}