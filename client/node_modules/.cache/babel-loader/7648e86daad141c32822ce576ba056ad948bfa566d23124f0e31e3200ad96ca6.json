{"ast":null,"code":"var _jsxFileName = \"/home/slow/ticket-sys/client/src/pages/ticketpage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TicketGrid = () => {\n  _s();\n  const [tickets, setTickets] = useState([]); // State to store tickets\n\n  useEffect(() => {\n    // Fetch all available tickets from the backend\n    axios.get(\"http://localhost:5000/api/tickets\") // Make the request to get all available tickets\n    .then(response => {\n      setTickets(response.data); // Store the tickets in state\n    }).catch(error => {\n      console.error(\"Error fetching tickets:\", error); // Handle any errors\n    });\n  }, []); // Empty dependency array means this effect runs only once when the component mounts\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Available Tickets\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: tickets.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No available tickets found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 11\n      }, this) : tickets.map(ticket => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Ticket Number: \", ticket.ticketNumber]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Status: \", ticket.available ? \"Available\" : \"Unavailable\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 15\n        }, this)]\n      }, ticket.ticketId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n_s(TicketGrid, \"54iZ51D3gm8y2vmomMR+587W7ik=\");\n_c = TicketGrid;\nexport default TicketGrid;\nvar _c;\n$RefreshReg$(_c, \"TicketGrid\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","TicketGrid","_s","tickets","setTickets","get","then","response","data","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","ticket","ticketNumber","available","ticketId","_c","$RefreshReg$"],"sources":["/home/slow/ticket-sys/client/src/pages/ticketpage.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nconst TicketGrid = () => {\n  const [tickets, setTickets] = useState([]); // State to store tickets\n\n  useEffect(() => {\n    // Fetch all available tickets from the backend\n    axios\n      .get(\"http://localhost:5000/api/tickets\") // Make the request to get all available tickets\n      .then((response) => {\n        setTickets(response.data); // Store the tickets in state\n      })\n      .catch((error) => {\n        console.error(\"Error fetching tickets:\", error); // Handle any errors\n      });\n  }, []); // Empty dependency array means this effect runs only once when the component mounts\n\n  return (\n    <div>\n      <h1>Available Tickets</h1>\n      <div>\n        {tickets.length === 0 ? (\n          <p>No available tickets found.</p>\n        ) : (\n          tickets.map((ticket) => (\n            <div key={ticket.ticketId}>\n              <p>Ticket Number: {ticket.ticketNumber}</p>\n              <p>Status: {ticket.available ? \"Available\" : \"Unavailable\"}</p>\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default TicketGrid;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE5CD,SAAS,CAAC,MAAM;IACd;IACAE,KAAK,CACFO,GAAG,CAAC,mCAAmC,CAAC,CAAC;IAAA,CACzCC,IAAI,CAAEC,QAAQ,IAAK;MAClBH,UAAU,CAACG,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC;IAC7B,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC,CAAC,CAAC;IACnD,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEV,OAAA;IAAAY,QAAA,gBACEZ,OAAA;MAAAY,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1BhB,OAAA;MAAAY,QAAA,EACGT,OAAO,CAACc,MAAM,KAAK,CAAC,gBACnBjB,OAAA;QAAAY,QAAA,EAAG;MAA2B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,GAElCb,OAAO,CAACe,GAAG,CAAEC,MAAM,iBACjBnB,OAAA;QAAAY,QAAA,gBACEZ,OAAA;UAAAY,QAAA,GAAG,iBAAe,EAACO,MAAM,CAACC,YAAY;QAAA;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC3ChB,OAAA;UAAAY,QAAA,GAAG,UAAQ,EAACO,MAAM,CAACE,SAAS,GAAG,WAAW,GAAG,aAAa;QAAA;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA,GAFvDG,MAAM,CAACG,QAAQ;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGpB,CACN;IACF;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACd,EAAA,CAhCID,UAAU;AAAAsB,EAAA,GAAVtB,UAAU;AAkChB,eAAeA,UAAU;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}