{"ast":null,"code":"var _jsxFileName = \"/home/slow/ticket-sys/client/src/pages/ticketpage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom'; // Import useLocation to get query parameters\nimport axios from 'axios'; // Using axios to make API calls\nimport './ticketgrid.css'; // Make sure this file is styled accordingly\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TicketGrid = () => {\n  _s();\n  const [tickets, setTickets] = useState([]);\n  const [selectedTickets, setSelectedTickets] = useState([]);\n  const [ticketCount, setTicketCount] = useState(0); // Dynamically setting ticketCount\n\n  // Use useLocation to get query parameters\n  const location = useLocation();\n  useEffect(() => {\n    // Retrieve ticketCount dynamically from the URL query parameters\n    const queryParams = new URLSearchParams(location.search);\n    const count = parseInt(queryParams.get('ticketCount'), 10) || 0; // Default to 0 if not available\n    setTicketCount(count);\n\n    // Fetch only available tickets from the API\n    axios.get('http://localhost:5000/api/tickets') // Backend endpoint to get available tickets\n    .then(response => {\n      setTickets(response.data); // Store available tickets in state\n    }).catch(error => {\n      console.error('Error fetching available tickets:', error);\n    });\n  }, [location.search]); // Ensure this effect runs whenever the query parameters change\n\n  const handleSelectTicket = ticketId => {\n    if (selectedTickets.includes(ticketId)) {\n      // If the ticket is already selected, unselect it (no alert)\n      setSelectedTickets(selectedTickets.filter(id => id !== ticketId));\n    } else if (selectedTickets.length < ticketCount) {\n      // If the ticket is not selected and the limit has not been reached, select it\n      setSelectedTickets([...selectedTickets, ticketId]);\n    }\n  };\n  const handleReserveTickets = () => {\n    if (selectedTickets.length === 0) {\n      alert('Please select at least one ticket to reserve.');\n      return;\n    }\n\n    // Reserve selected tickets\n    axios.post('http://localhost:5000/api/tickets/reserve', {\n      ticketIds: selectedTickets,\n      name: 'User Name',\n      // Replace with real user input\n      phoneNumber: '1234567890',\n      email: 'user@example.com'\n    }).then(() => {\n      alert('Tickets reserved successfully!');\n      setSelectedTickets([]); // Clear selected tickets after reservation\n    }).catch(error => {\n      console.error('Error reserving tickets:', error);\n    });\n  };\n\n  // Function to get the ticket numbers for the selected ticket IDs\n  const getSelectedTicketNumbers = () => {\n    return selectedTickets.map(ticketId => {\n      const ticket = tickets.find(ticket => ticket.ticketId === ticketId);\n      return ticket ? ticket.ticketNumber : null; // Return ticket number or null if not found\n    }).filter(ticketNumber => ticketNumber !== null); // Filter out null values\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ticket-grid\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Available Tickets\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tickets\",\n      children: tickets.map(ticket => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `ticket ${selectedTickets.includes(ticket.ticketId) ? 'selected' : ''}`,\n        onClick: () => handleSelectTicket(ticket.ticketId) // Handle click to select/unselect ticket\n        ,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Ticket #\", ticket.ticketNumber]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: ticket.available ? 'Available' : 'Reserved'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this)]\n      }, ticket.ticketId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"actions\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Selected Tickets: \", selectedTickets.length, \"/\", ticketCount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: getSelectedTicketNumbers().map((ticketNumber, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Ticket #\", ticketNumber]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleReserveTickets,\n        disabled: selectedTickets.length === 0,\n        children: \"Reserve Tickets\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s(TicketGrid, \"km/JSbeykz6vAefJtbF7HXdLd7Q=\", false, function () {\n  return [useLocation];\n});\n_c = TicketGrid;\nexport default TicketGrid;\nvar _c;\n$RefreshReg$(_c, \"TicketGrid\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","axios","jsxDEV","_jsxDEV","TicketGrid","_s","tickets","setTickets","selectedTickets","setSelectedTickets","ticketCount","setTicketCount","location","queryParams","URLSearchParams","search","count","parseInt","get","then","response","data","catch","error","console","handleSelectTicket","ticketId","includes","filter","id","length","handleReserveTickets","alert","post","ticketIds","name","phoneNumber","email","getSelectedTicketNumbers","map","ticket","find","ticketNumber","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","available","index","disabled","_c","$RefreshReg$"],"sources":["/home/slow/ticket-sys/client/src/pages/ticketpage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';  // Import useLocation to get query parameters\nimport axios from 'axios';  // Using axios to make API calls\nimport './ticketgrid.css';  // Make sure this file is styled accordingly\n\nconst TicketGrid = () => {\n  const [tickets, setTickets] = useState([]);\n  const [selectedTickets, setSelectedTickets] = useState([]);\n  const [ticketCount, setTicketCount] = useState(0);  // Dynamically setting ticketCount\n\n  // Use useLocation to get query parameters\n  const location = useLocation();\n\n  useEffect(() => {\n    // Retrieve ticketCount dynamically from the URL query parameters\n    const queryParams = new URLSearchParams(location.search);\n    const count = parseInt(queryParams.get('ticketCount'), 10) || 0;  // Default to 0 if not available\n    setTicketCount(count);\n\n    // Fetch only available tickets from the API\n    axios\n      .get('http://localhost:5000/api/tickets')  // Backend endpoint to get available tickets\n      .then((response) => {\n        setTickets(response.data);  // Store available tickets in state\n      })\n      .catch((error) => {\n        console.error('Error fetching available tickets:', error);\n      });\n  }, [location.search]);  // Ensure this effect runs whenever the query parameters change\n\n  const handleSelectTicket = (ticketId) => {\n    if (selectedTickets.includes(ticketId)) {\n      // If the ticket is already selected, unselect it (no alert)\n      setSelectedTickets(selectedTickets.filter((id) => id !== ticketId));\n    } else if (selectedTickets.length < ticketCount) {\n      // If the ticket is not selected and the limit has not been reached, select it\n      setSelectedTickets([...selectedTickets, ticketId]);\n    }\n  };\n\n  const handleReserveTickets = () => {\n    if (selectedTickets.length === 0) {\n      alert('Please select at least one ticket to reserve.');\n      return;\n    }\n\n    // Reserve selected tickets\n    axios\n      .post('http://localhost:5000/api/tickets/reserve', {\n        ticketIds: selectedTickets,\n        name: 'User Name',  // Replace with real user input\n        phoneNumber: '1234567890',\n        email: 'user@example.com',\n      })\n      .then(() => {\n        alert('Tickets reserved successfully!');\n        setSelectedTickets([]);  // Clear selected tickets after reservation\n      })\n      .catch((error) => {\n        console.error('Error reserving tickets:', error);\n      });\n  };\n\n  // Function to get the ticket numbers for the selected ticket IDs\n  const getSelectedTicketNumbers = () => {\n    return selectedTickets\n      .map((ticketId) => {\n        const ticket = tickets.find((ticket) => ticket.ticketId === ticketId);\n        return ticket ? ticket.ticketNumber : null;  // Return ticket number or null if not found\n      })\n      .filter((ticketNumber) => ticketNumber !== null);  // Filter out null values\n  };\n\n  return (\n    <div className=\"ticket-grid\">\n      <h1>Available Tickets</h1>\n      <div className=\"tickets\">\n        {tickets.map((ticket) => (\n          <div\n            key={ticket.ticketId}\n            className={`ticket ${selectedTickets.includes(ticket.ticketId) ? 'selected' : ''}`}\n            onClick={() => handleSelectTicket(ticket.ticketId)}  // Handle click to select/unselect ticket\n          >\n            <p>Ticket #{ticket.ticketNumber}</p>\n            <p>{ticket.available ? 'Available' : 'Reserved'}</p>\n          </div>\n        ))}\n      </div>\n\n      {/* Actions div - Always visible at the bottom */}\n      <div className=\"actions\">\n        <p>\n          Selected Tickets: {selectedTickets.length}/{ticketCount}\n        </p>\n       <div>\n       {getSelectedTicketNumbers().map((ticketNumber, index) => (\n              <li key={index}>Ticket #{ticketNumber}</li>  \n            ))}\n       </div>\n        <button onClick={handleReserveTickets} disabled={selectedTickets.length === 0}>\n          Reserve Tickets\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default TicketGrid;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}