{"ast":null,"code":"var _jsxFileName = \"/home/slow/ticket-sys/client/src/pages/ticketpage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useParams } from \"react-router-dom\";\nimport './ticketgrid.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TicketGrid = () => {\n  _s();\n  const {\n    uniqueId\n  } = useParams(); // Extract uniqueId from URL\n  const [tickets, setTickets] = useState([]); // State to hold fetched tickets\n  const [selectedTickets, setSelectedTickets] = useState([]); // State for selected tickets\n  const [ticketCount, setTicketCount] = useState(0); // State for the maximum ticket count\n\n  // Fetch available tickets and ticket count limit when component mounts\n  useEffect(() => {\n    // Fetch tickets and ticket count from API or other sources\n    axios.get(\"http://localhost:5000/api/tickets\") // Adjust to your API for fetching tickets\n    .then(response => setTickets(response.data)).catch(error => console.error(\"Error fetching tickets:\", error));\n\n    // Assuming the ticket count comes from somewhere, like props or a previous page\n    setTicketCount(3); // Example of a fixed value, could be dynamic based on user input\n  }, []);\n  const handleTicketClick = ticketId => {\n    // Prevent selecting more tickets than the specified ticket count\n    if (selectedTickets.length >= ticketCount && !selectedTickets.includes(ticketId)) {\n      alert(`You can only select ${ticketCount} tickets.`);\n      return;\n    }\n\n    // Toggle the selected state of the clicked ticket\n    if (selectedTickets.includes(ticketId)) {\n      // If the ticket is already selected, unselect it\n      setSelectedTickets(selectedTickets.filter(id => id !== ticketId));\n    } else {\n      // If the ticket is not selected, select it\n      setSelectedTickets([...selectedTickets, ticketId]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Available Tickets\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ticket-grid\",\n      children: tickets.map(ticket => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `ticket ${selectedTickets.includes(ticket.id) ? 'selected' : ''}`,\n        onClick: () => handleTicketClick(ticket.id),\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Ticket ID: \", ticket.ticketNumber]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this)\n      }, ticket.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), selectedTickets.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => alert(\"Proceed to form for confirmation!\"),\n        children: \"Confirm Selection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(TicketGrid, \"ktdaP+mFnOGKdO+vEBJqsPS3dR8=\", false, function () {\n  return [useParams];\n});\n_c = TicketGrid;\nexport default TicketGrid;\nvar _c;\n$RefreshReg$(_c, \"TicketGrid\");","map":{"version":3,"names":["React","useState","useEffect","axios","useParams","jsxDEV","_jsxDEV","TicketGrid","_s","uniqueId","tickets","setTickets","selectedTickets","setSelectedTickets","ticketCount","setTicketCount","get","then","response","data","catch","error","console","handleTicketClick","ticketId","length","includes","alert","filter","id","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","ticket","onClick","ticketNumber","_c","$RefreshReg$"],"sources":["/home/slow/ticket-sys/client/src/pages/ticketpage.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useParams } from \"react-router-dom\";\nimport './ticketgrid.css'\nconst TicketGrid = () => {\n  const { uniqueId } = useParams(); // Extract uniqueId from URL\n  const [tickets, setTickets] = useState([]); // State to hold fetched tickets\n  const [selectedTickets, setSelectedTickets] = useState([]); // State for selected tickets\n  const [ticketCount, setTicketCount] = useState(0); // State for the maximum ticket count\n\n  // Fetch available tickets and ticket count limit when component mounts\n  useEffect(() => {\n    // Fetch tickets and ticket count from API or other sources\n    axios\n      .get(\"http://localhost:5000/api/tickets\") // Adjust to your API for fetching tickets\n      .then((response) => setTickets(response.data))\n      .catch((error) => console.error(\"Error fetching tickets:\", error));\n\n    // Assuming the ticket count comes from somewhere, like props or a previous page\n    setTicketCount(3); // Example of a fixed value, could be dynamic based on user input\n  }, []);\n\n  const handleTicketClick = (ticketId) => {\n    // Prevent selecting more tickets than the specified ticket count\n    if (selectedTickets.length >= ticketCount && !selectedTickets.includes(ticketId)) {\n      alert(`You can only select ${ticketCount} tickets.`);\n      return;\n    }\n\n    // Toggle the selected state of the clicked ticket\n    if (selectedTickets.includes(ticketId)) {\n      // If the ticket is already selected, unselect it\n      setSelectedTickets(selectedTickets.filter((id) => id !== ticketId));\n    } else {\n      // If the ticket is not selected, select it\n      setSelectedTickets([...selectedTickets, ticketId]);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Available Tickets</h1>\n      <div className=\"ticket-grid\">\n        {tickets.map((ticket) => (\n          <div\n            key={ticket.id}\n            className={`ticket ${selectedTickets.includes(ticket.id) ? 'selected' : ''}`}\n            onClick={() => handleTicketClick(ticket.id)}\n          >\n            <p>Ticket ID: {ticket.ticketNumber}</p>\n          </div>\n        ))}\n      </div>\n      {selectedTickets.length > 0 && (\n        <div className=\"modal\">\n          <button onClick={() => alert(\"Proceed to form for confirmation!\")}>\n            Confirm Selection\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TicketGrid;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}