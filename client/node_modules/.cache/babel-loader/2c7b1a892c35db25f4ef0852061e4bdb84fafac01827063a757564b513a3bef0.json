{"ast":null,"code":"var _jsxFileName = \"/home/slow/ticket-sys/client/src/pages/ticketpage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TicketGrid = () => {\n  _s();\n  const {\n    uniqueId\n  } = useParams(); // Extract uniqueId from URL\n  const [tickets, setTickets] = useState([]); // State to hold fetched tickets\n  const [selectedTickets, setSelectedTickets] = useState([]); // State for selected tickets\n  const [ticketCount, setTicketCount] = useState(0); // State for the maximum ticket count\n\n  // Fetch available tickets and ticket count limit when component mounts\n  useEffect(() => {\n    // Fetch tickets and ticket count from API or other sources\n    axios.get(\"http://localhost:5000/api/tickets\") // Adjust to your API for fetching tickets\n    .then(response => setTickets(response.data)).catch(error => console.error(\"Error fetching tickets:\", error));\n\n    // Fetch ticket count limit from the server or via URL (modify accordingly)\n    const countFromUrl = new URLSearchParams(window.location.search).get(\"ticketCount\");\n    setTicketCount(parseInt(countFromUrl, 10)); // Set the max ticket count\n  }, [uniqueId]); // Re-fetch tickets if uniqueId changes\n\n  // Function to handle ticket selection\n  const handleTicketSelect = ticketId => {\n    if (selectedTickets.length >= ticketCount) {\n      alert(`You can only select ${ticketCount} ticket(s).`);\n      return;\n    }\n\n    // Add or remove selected ticket based on current state\n    if (selectedTickets.includes(ticketId)) {\n      setSelectedTickets(selectedTickets.filter(id => id !== ticketId));\n    } else {\n      setSelectedTickets([...selectedTickets, ticketId]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ticket-grid-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Available Tickets\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ticket-grid\",\n      children: tickets.map(ticket => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `ticket ${selectedTickets.includes(ticket.id) ? \"selected\" : \"\"}`,\n        onClick: () => handleTicketSelect(ticket.id) // Toggle selection on click\n        ,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Ticket ID: \", ticket.ticketNumber]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Status: \", ticket.available ? \"Available\" : \"Reserved\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this)]\n      }, ticket.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), selectedTickets.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"confirmation-modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"You have selected \", selectedTickets.length, \" ticket(s)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => alert(\"Redirect to the form\"),\n        children: \"Proceed to Form\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(TicketGrid, \"ktdaP+mFnOGKdO+vEBJqsPS3dR8=\", false, function () {\n  return [useParams];\n});\n_c = TicketGrid;\nexport default TicketGrid;\nvar _c;\n$RefreshReg$(_c, \"TicketGrid\");","map":{"version":3,"names":["React","useState","useEffect","axios","useParams","jsxDEV","_jsxDEV","TicketGrid","_s","uniqueId","tickets","setTickets","selectedTickets","setSelectedTickets","ticketCount","setTicketCount","get","then","response","data","catch","error","console","countFromUrl","URLSearchParams","window","location","search","parseInt","handleTicketSelect","ticketId","length","alert","includes","filter","id","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","ticket","onClick","ticketNumber","available","_c","$RefreshReg$"],"sources":["/home/slow/ticket-sys/client/src/pages/ticketpage.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useParams } from \"react-router-dom\";\n\nconst TicketGrid = () => {\n  const { uniqueId } = useParams(); // Extract uniqueId from URL\n  const [tickets, setTickets] = useState([]); // State to hold fetched tickets\n  const [selectedTickets, setSelectedTickets] = useState([]); // State for selected tickets\n  const [ticketCount, setTicketCount] = useState(0); // State for the maximum ticket count\n\n  // Fetch available tickets and ticket count limit when component mounts\n  useEffect(() => {\n    // Fetch tickets and ticket count from API or other sources\n    axios\n      .get(\"http://localhost:5000/api/tickets\") // Adjust to your API for fetching tickets\n      .then((response) => setTickets(response.data))\n      .catch((error) => console.error(\"Error fetching tickets:\", error));\n\n    // Fetch ticket count limit from the server or via URL (modify accordingly)\n    const countFromUrl = new URLSearchParams(window.location.search).get(\"ticketCount\");\n    setTicketCount(parseInt(countFromUrl, 10)); // Set the max ticket count\n  }, [uniqueId]); // Re-fetch tickets if uniqueId changes\n\n  // Function to handle ticket selection\n  const handleTicketSelect = (ticketId) => {\n    if (selectedTickets.length >= ticketCount) {\n      alert(`You can only select ${ticketCount} ticket(s).`);\n      return;\n    }\n\n    // Add or remove selected ticket based on current state\n    if (selectedTickets.includes(ticketId)) {\n      setSelectedTickets(selectedTickets.filter((id) => id !== ticketId));\n    } else {\n      setSelectedTickets([...selectedTickets, ticketId]);\n    }\n  };\n\n  return (\n    <div className=\"ticket-grid-container\">\n      <h1>Available Tickets</h1>\n\n      <div className=\"ticket-grid\">\n        {tickets.map((ticket) => (\n          <div\n            key={ticket.id}\n            className={`ticket ${selectedTickets.includes(ticket.id) ? \"selected\" : \"\"}`}\n            onClick={() => handleTicketSelect(ticket.id)} // Toggle selection on click\n          >\n            <p>Ticket ID: {ticket.ticketNumber}</p>\n            <p>Status: {ticket.available ? \"Available\" : \"Reserved\"}</p>\n          </div>\n        ))}\n      </div>\n\n      {selectedTickets.length > 0 && (\n        <div className=\"confirmation-modal\">\n          <p>You have selected {selectedTickets.length} ticket(s)</p>\n          <button onClick={() => alert(\"Redirect to the form\")}>Proceed to Form</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TicketGrid;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}