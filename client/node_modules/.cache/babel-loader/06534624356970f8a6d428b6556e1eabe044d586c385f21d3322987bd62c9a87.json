{"ast":null,"code":"var _jsxFileName = \"/home/slow/ticket-sys/client/src/pages/ticketpage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TicketGrid = () => {\n  _s();\n  const {\n    uniqueId\n  } = useParams(); // Extract uniqueId from URL\n  const [tickets, setTickets] = useState([]);\n  useEffect(() => {\n    // Fetch available tickets (you don't need uniqueId here if you're fetching all tickets)\n    axios.get('http://localhost:5000/api/tickets') // Fetch all available tickets\n    .then(response => {\n      setTickets(response.data);\n    }).catch(error => {\n      console.error('Error fetching tickets:', error);\n    });\n  }, [uniqueId]); // Re-run when uniqueId changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Available Tickets\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: tickets.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No available tickets found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }, this) : tickets.map(ticket => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\"\n            // Logic to select/deselect ticket\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 17\n          }, this), \"Ticket Number: \", ticket.ticketNumber, \" (Available)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 15\n        }, this)\n      }, ticket.ticketId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n_s(TicketGrid, \"lOY2Ftd9tTpLrg/yj4pg95iimbI=\", false, function () {\n  return [useParams];\n});\n_c = TicketGrid;\nexport default TicketGrid;\nvar _c;\n$RefreshReg$(_c, \"TicketGrid\");","map":{"version":3,"names":["React","useEffect","useState","useParams","axios","jsxDEV","_jsxDEV","TicketGrid","_s","uniqueId","tickets","setTickets","get","then","response","data","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","ticket","type","ticketNumber","ticketId","_c","$RefreshReg$"],"sources":["/home/slow/ticket-sys/client/src/pages/ticketpage.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\n\nconst TicketGrid = () => {\n  const { uniqueId } = useParams(); // Extract uniqueId from URL\n  const [tickets, setTickets] = useState([]);\n\n  useEffect(() => {\n    // Fetch available tickets (you don't need uniqueId here if you're fetching all tickets)\n    axios\n      .get('http://localhost:5000/api/tickets')  // Fetch all available tickets\n      .then((response) => {\n        setTickets(response.data);\n      })\n      .catch((error) => {\n        console.error('Error fetching tickets:', error);\n      });\n  }, [uniqueId]);  // Re-run when uniqueId changes\n\n  return (\n    <div>\n      <h1>Available Tickets</h1>\n      <div>\n        {tickets.length === 0 ? (\n          <p>No available tickets found.</p>\n        ) : (\n          tickets.map((ticket) => (\n            <div key={ticket.ticketId}>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  // Logic to select/deselect ticket\n                />\n                Ticket Number: {ticket.ticketNumber} (Available)\n              </label>\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default TicketGrid;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM;IAAEC;EAAS,CAAC,GAAGN,SAAS,CAAC,CAAC,CAAC,CAAC;EAClC,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE1CD,SAAS,CAAC,MAAM;IACd;IACAG,KAAK,CACFQ,GAAG,CAAC,mCAAmC,CAAC,CAAE;IAAA,CAC1CC,IAAI,CAAEC,QAAQ,IAAK;MAClBH,UAAU,CAACG,QAAQ,CAACC,IAAI,CAAC;IAC3B,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD,CAAC,CAAC;EACN,CAAC,EAAE,CAACR,QAAQ,CAAC,CAAC,CAAC,CAAE;;EAEjB,oBACEH,OAAA;IAAAa,QAAA,gBACEb,OAAA;MAAAa,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1BjB,OAAA;MAAAa,QAAA,EACGT,OAAO,CAACc,MAAM,KAAK,CAAC,gBACnBlB,OAAA;QAAAa,QAAA,EAAG;MAA2B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,GAElCb,OAAO,CAACe,GAAG,CAAEC,MAAM,iBACjBpB,OAAA;QAAAa,QAAA,eACEb,OAAA;UAAAa,QAAA,gBACEb,OAAA;YACEqB,IAAI,EAAC;YACL;UAAA;YAAAP,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACD,CAAC,mBACa,EAACG,MAAM,CAACE,YAAY,EAAC,cACtC;QAAA;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO;MAAC,GAPAG,MAAM,CAACG,QAAQ;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAQpB,CACN;IACF;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACf,EAAA,CAtCID,UAAU;EAAA,QACOJ,SAAS;AAAA;AAAA2B,EAAA,GAD1BvB,UAAU;AAwChB,eAAeA,UAAU;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}