{"ast":null,"code":"var _jsxFileName = \"/home/slow/ticket-sys/client/src/pages/ticketpage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TicketGrid = () => {\n  _s();\n  const [tickets, setTickets] = useState([]);\n  const [userDetails, setUserDetails] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    phoneNumber: \"\"\n  });\n  useEffect(() => {\n    // Fetch available tickets from the backend\n    const fetchTickets = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:5000/api/tickets/available\");\n        setTickets(response.data);\n      } catch (error) {\n        console.error(\"Error fetching tickets:\", error);\n      }\n    };\n    fetchTickets();\n  }, []);\n  const handleSelectTicket = async ticketNumber => {\n    // Here you would prompt the user to input their details and then reserve the ticket\n    const userDetails = {\n      firstName: \"John\",\n      // These would be dynamic, based on user input\n      lastName: \"Doe\",\n      email: \"john.doe@example.com\",\n      phoneNumber: \"1234567890\"\n    };\n    try {\n      // Send the data to the backend to reserve the ticket\n      const response = await axios.post(\"http://localhost:5000/api/tickets/reserve\", {\n        ticketNumber,\n        userDetails\n      });\n      alert(response.data.message); // Server response message\n      fetchTickets(); // Refresh the ticket list after reserving\n    } catch (error) {\n      console.error(\"Error reserving ticket:\", error);\n      alert(\"Error reserving ticket\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Available Tickets\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ticket-grid\",\n      children: tickets.map(ticket => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ticket-item\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleSelectTicket(ticket.ticketNumber),\n          disabled: !ticket.available // Disable if the ticket is not available\n          ,\n          children: ticket.ticketNumber\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this)\n      }, ticket.ticketNumber, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(TicketGrid, \"BU07bcy4/3ftaQhdFq0A/zHrDbM=\");\n_c = TicketGrid;\nexport default TicketGrid;\nvar _c;\n$RefreshReg$(_c, \"TicketGrid\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","TicketGrid","_s","tickets","setTickets","userDetails","setUserDetails","firstName","lastName","email","phoneNumber","fetchTickets","response","get","data","error","console","handleSelectTicket","ticketNumber","post","alert","message","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","ticket","onClick","disabled","available","_c","$RefreshReg$"],"sources":["/home/slow/ticket-sys/client/src/pages/ticketpage.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst TicketGrid = () => {\n  const [tickets, setTickets] = useState([]);\n  const [userDetails, setUserDetails] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    phoneNumber: \"\",\n  });\n\n  useEffect(() => {\n    // Fetch available tickets from the backend\n    const fetchTickets = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:5000/api/tickets/available\");\n        setTickets(response.data);\n      } catch (error) {\n        console.error(\"Error fetching tickets:\", error);\n      }\n    };\n\n    fetchTickets();\n  }, []);\n\n  const handleSelectTicket = async (ticketNumber) => {\n    // Here you would prompt the user to input their details and then reserve the ticket\n    const userDetails = {\n      firstName: \"John\", // These would be dynamic, based on user input\n      lastName: \"Doe\",\n      email: \"john.doe@example.com\",\n      phoneNumber: \"1234567890\",\n    };\n\n    try {\n      // Send the data to the backend to reserve the ticket\n      const response = await axios.post(\"http://localhost:5000/api/tickets/reserve\", {\n        ticketNumber,\n        userDetails,\n      });\n\n      alert(response.data.message); // Server response message\n      fetchTickets(); // Refresh the ticket list after reserving\n    } catch (error) {\n      console.error(\"Error reserving ticket:\", error);\n      alert(\"Error reserving ticket\");\n    }\n  };\n\n  return (\n    <div>\n      <h1>Available Tickets</h1>\n      <div className=\"ticket-grid\">\n        {tickets.map((ticket) => (\n          <div key={ticket.ticketNumber} className=\"ticket-item\">\n            <button\n              onClick={() => handleSelectTicket(ticket.ticketNumber)}\n              disabled={!ticket.available} // Disable if the ticket is not available\n            >\n              {ticket.ticketNumber}\n            </button>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default TicketGrid;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACS,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC;IAC7CW,SAAS,EAAE,EAAE;IACbC,QAAQ,EAAE,EAAE;IACZC,KAAK,EAAE,EAAE;IACTC,WAAW,EAAE;EACf,CAAC,CAAC;EAEFb,SAAS,CAAC,MAAM;IACd;IACA,MAAMc,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMd,KAAK,CAACe,GAAG,CAAC,6CAA6C,CAAC;QAC/ET,UAAU,CAACQ,QAAQ,CAACE,IAAI,CAAC;MAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;IACF,CAAC;IAEDJ,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMM,kBAAkB,GAAG,MAAOC,YAAY,IAAK;IACjD;IACA,MAAMb,WAAW,GAAG;MAClBE,SAAS,EAAE,MAAM;MAAE;MACnBC,QAAQ,EAAE,KAAK;MACfC,KAAK,EAAE,sBAAsB;MAC7BC,WAAW,EAAE;IACf,CAAC;IAED,IAAI;MACF;MACA,MAAME,QAAQ,GAAG,MAAMd,KAAK,CAACqB,IAAI,CAAC,2CAA2C,EAAE;QAC7ED,YAAY;QACZb;MACF,CAAC,CAAC;MAEFe,KAAK,CAACR,QAAQ,CAACE,IAAI,CAACO,OAAO,CAAC,CAAC,CAAC;MAC9BV,YAAY,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/CK,KAAK,CAAC,wBAAwB,CAAC;IACjC;EACF,CAAC;EAED,oBACEpB,OAAA;IAAAsB,QAAA,gBACEtB,OAAA;MAAAsB,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1B1B,OAAA;MAAK2B,SAAS,EAAC,aAAa;MAAAL,QAAA,EACzBnB,OAAO,CAACyB,GAAG,CAAEC,MAAM,iBAClB7B,OAAA;QAA+B2B,SAAS,EAAC,aAAa;QAAAL,QAAA,eACpDtB,OAAA;UACE8B,OAAO,EAAEA,CAAA,KAAMb,kBAAkB,CAACY,MAAM,CAACX,YAAY,CAAE;UACvDa,QAAQ,EAAE,CAACF,MAAM,CAACG,SAAU,CAAC;UAAA;UAAAV,QAAA,EAE5BO,MAAM,CAACX;QAAY;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACd;MAAC,GANDG,MAAM,CAACX,YAAY;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAOxB,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACxB,EAAA,CAhEID,UAAU;AAAAgC,EAAA,GAAVhC,UAAU;AAkEhB,eAAeA,UAAU;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}